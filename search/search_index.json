{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages templates","title":"templates"},{"location":"templates--index/","text":"A simple text-based template engine. Public Types \u00b6 class TemplateValue class TemplateValues class TemplateContext class Template","title":"Package"},{"location":"templates--index/#public-types","text":"class TemplateValue class TemplateValues class TemplateContext class Template","title":"Public Types"},{"location":"templates-Template/","text":"Template \u00b6 [Source] class val Template Constructors \u00b6 parse \u00b6 [Source] new val parse( source: String val, ctx: TemplateContext val = call) : Template val^ ? Parameters \u00b6 source: String val ctx: TemplateContext val = call Returns \u00b6 Template val^ ? from_file \u00b6 [Source] new val from_file( path: FilePath val, ctx: TemplateContext val = call) : Template val^ ? Parameters \u00b6 path: FilePath val ctx: TemplateContext val = call Returns \u00b6 Template val^ ? Public Functions \u00b6 render \u00b6 [Source] Fills in the given values into template. fun box render( values: TemplateValues box) : String val ? Parameters \u00b6 values: TemplateValues box Returns \u00b6 String val ?","title":"class Template"},{"location":"templates-Template/#template","text":"[Source] class val Template","title":"Template"},{"location":"templates-Template/#constructors","text":"","title":"Constructors"},{"location":"templates-Template/#parse","text":"[Source] new val parse( source: String val, ctx: TemplateContext val = call) : Template val^ ?","title":"parse"},{"location":"templates-Template/#parameters","text":"source: String val ctx: TemplateContext val = call","title":"Parameters"},{"location":"templates-Template/#returns","text":"Template val^ ?","title":"Returns"},{"location":"templates-Template/#from_file","text":"[Source] new val from_file( path: FilePath val, ctx: TemplateContext val = call) : Template val^ ?","title":"from_file"},{"location":"templates-Template/#parameters_1","text":"path: FilePath val ctx: TemplateContext val = call","title":"Parameters"},{"location":"templates-Template/#returns_1","text":"Template val^ ?","title":"Returns"},{"location":"templates-Template/#public-functions","text":"","title":"Public Functions"},{"location":"templates-Template/#render","text":"[Source] Fills in the given values into template. fun box render( values: TemplateValues box) : String val ?","title":"render"},{"location":"templates-Template/#parameters_2","text":"values: TemplateValues box","title":"Parameters"},{"location":"templates-Template/#returns_2","text":"String val ?","title":"Returns"},{"location":"templates-TemplateContext/","text":"TemplateContext \u00b6 [Source] class ref TemplateContext Constructors \u00b6 create \u00b6 [Source] new val create( functions': HashMap[String val, {(String): String} ref, HashEq[String val] val] val = recover) : TemplateContext val^ Parameters \u00b6 functions': HashMap [ String val, {(String): String} ref, HashEq [ String val] val] val = recover Returns \u00b6 TemplateContext val^ Public fields \u00b6 let functions: HashMap [ String val, {(String): String} ref, HashEq [ String val] val] box \u00b6 [Source]","title":"class TemplateContext"},{"location":"templates-TemplateContext/#templatecontext","text":"[Source] class ref TemplateContext","title":"TemplateContext"},{"location":"templates-TemplateContext/#constructors","text":"","title":"Constructors"},{"location":"templates-TemplateContext/#create","text":"[Source] new val create( functions': HashMap[String val, {(String): String} ref, HashEq[String val] val] val = recover) : TemplateContext val^","title":"create"},{"location":"templates-TemplateContext/#parameters","text":"functions': HashMap [ String val, {(String): String} ref, HashEq [ String val] val] val = recover","title":"Parameters"},{"location":"templates-TemplateContext/#returns","text":"TemplateContext val^","title":"Returns"},{"location":"templates-TemplateContext/#public-fields","text":"","title":"Public fields"},{"location":"templates-TemplateContext/#let-functions-hashmapstring-val-string-string-ref-hasheqstring-val-val-box","text":"[Source]","title":"let functions: HashMap[String val, {(String): String} ref, HashEq[String val] val] box"},{"location":"templates-TemplateValue/","text":"TemplateValue \u00b6 [Source] A value that can be used in a template. Either a single value or a sequence of values. class box TemplateValue Constructors \u00b6 create \u00b6 [Source] new box create( value: (String val | Seq[TemplateValue box] box), properties: HashMap[String val, TemplateValue box, HashEq[String val] val] box = qualify) : TemplateValue box^ Parameters \u00b6 value: ( String val | Seq [ TemplateValue box] box) properties: HashMap [ String val, TemplateValue box, HashEq [ String val] val] box = qualify Returns \u00b6 TemplateValue box^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( name: String val) : TemplateValue box ? Parameters \u00b6 name: String val Returns \u00b6 TemplateValue box ? string \u00b6 [Source] fun box string() : String val ? Returns \u00b6 String val ? values \u00b6 [Source] fun box values() : Iterator[TemplateValue box] ref Returns \u00b6 Iterator [ TemplateValue box] ref","title":"class TemplateValue"},{"location":"templates-TemplateValue/#templatevalue","text":"[Source] A value that can be used in a template. Either a single value or a sequence of values. class box TemplateValue","title":"TemplateValue"},{"location":"templates-TemplateValue/#constructors","text":"","title":"Constructors"},{"location":"templates-TemplateValue/#create","text":"[Source] new box create( value: (String val | Seq[TemplateValue box] box), properties: HashMap[String val, TemplateValue box, HashEq[String val] val] box = qualify) : TemplateValue box^","title":"create"},{"location":"templates-TemplateValue/#parameters","text":"value: ( String val | Seq [ TemplateValue box] box) properties: HashMap [ String val, TemplateValue box, HashEq [ String val] val] box = qualify","title":"Parameters"},{"location":"templates-TemplateValue/#returns","text":"TemplateValue box^","title":"Returns"},{"location":"templates-TemplateValue/#public-functions","text":"","title":"Public Functions"},{"location":"templates-TemplateValue/#apply","text":"[Source] fun box apply( name: String val) : TemplateValue box ?","title":"apply"},{"location":"templates-TemplateValue/#parameters_1","text":"name: String val","title":"Parameters"},{"location":"templates-TemplateValue/#returns_1","text":"TemplateValue box ?","title":"Returns"},{"location":"templates-TemplateValue/#string","text":"[Source] fun box string() : String val ?","title":"string"},{"location":"templates-TemplateValue/#returns_2","text":"String val ?","title":"Returns"},{"location":"templates-TemplateValue/#values","text":"[Source] fun box values() : Iterator[TemplateValue box] ref","title":"values"},{"location":"templates-TemplateValue/#returns_3","text":"Iterator [ TemplateValue box] ref","title":"Returns"},{"location":"templates-TemplateValues/","text":"TemplateValues \u00b6 [Source] class ref TemplateValues Constructors \u00b6 create \u00b6 [Source] new ref create() : TemplateValues ref^ Returns \u00b6 TemplateValues ref^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( name: String val) : TemplateValue box ? Parameters \u00b6 name: String val Returns \u00b6 TemplateValue box ? update \u00b6 [Source] fun ref update( name: String val, value: (String val | TemplateValue box)) : None val Parameters \u00b6 name: String val value: ( String val | TemplateValue box) Returns \u00b6 None val","title":"class TemplateValues"},{"location":"templates-TemplateValues/#templatevalues","text":"[Source] class ref TemplateValues","title":"TemplateValues"},{"location":"templates-TemplateValues/#constructors","text":"","title":"Constructors"},{"location":"templates-TemplateValues/#create","text":"[Source] new ref create() : TemplateValues ref^","title":"create"},{"location":"templates-TemplateValues/#returns","text":"TemplateValues ref^","title":"Returns"},{"location":"templates-TemplateValues/#public-functions","text":"","title":"Public Functions"},{"location":"templates-TemplateValues/#apply","text":"[Source] fun box apply( name: String val) : TemplateValue box ?","title":"apply"},{"location":"templates-TemplateValues/#parameters","text":"name: String val","title":"Parameters"},{"location":"templates-TemplateValues/#returns_1","text":"TemplateValue box ?","title":"Returns"},{"location":"templates-TemplateValues/#update","text":"[Source] fun ref update( name: String val, value: (String val | TemplateValue box)) : None val","title":"update"},{"location":"templates-TemplateValues/#parameters_1","text":"name: String val value: ( String val | TemplateValue box)","title":"Parameters"},{"location":"templates-TemplateValues/#returns_2","text":"None val","title":"Returns"},{"location":"src/templates/template/","text":"\"\"\" A simple text-based template engine. \"\"\" use \"collections\" use \"files\" use \"regex\" use \"valbytes\" primitive _Literal class _Call let f: {(String): String} val let arg: _PropNode new box create(f': {(String): String} val, arg': _PropNode) => f = f' arg = arg' class _If let value: _PropNode let body: Array[_Part] box new box create(value': _PropNode, body': Array[_Part] box) => value = value' body = body' class _IfNotEmpty let value: _PropNode let body: Array[_Part] box new box create(value': _PropNode, body': Array[_Part] box) => value = value' body = body' class _Loop let target: String let source: _PropNode let body: Array[_Part] box new box create(target': String, source': _PropNode, body': Array[_Part] box) => target = target' source = source' body = body' type _Part is ((_Literal, String) | _Call box | _PropNode | _If box | _IfNotEmpty box | _Loop box) class box TemplateValue \"\"\" A value that can be used in a template. Either a single value or a sequence of values. \"\"\" let _value: (String | None) let _values: Seq[TemplateValue] box let _properties: Map[String, TemplateValue] box new box create( value: (String | Seq[TemplateValue] box), properties: Map[String, TemplateValue] box = Map[String, TemplateValue] ) => _value = match value | let s: String => s else None end _values = match value | let seq: Seq[TemplateValue] box => seq else [] end _properties = properties fun apply(name: String): TemplateValue? => _properties(name)? fun string(): String? => _value as String fun values(): Iterator[TemplateValue] => _values.values() class TemplateValues let _parent: (TemplateValues box | None) let _values: Map[String, TemplateValue] new _create( parent: TemplateValues box, values: Map[String, TemplateValue] ) => _parent = parent _values = values new create() => _parent = None _values = Map[String, TemplateValue] fun box apply(name: String): TemplateValue? => try _values(name)? else match _parent | let parent: TemplateValues box => parent(name)? | None => error end end fun box _lookup(prop: _PropNode): TemplateValue? => var value = this(prop.name)? for name in prop.props.values() do value = value(name)? end value fun ref update(name: String, value: (String | TemplateValue)) => _values(name) = match value | let string: String => TemplateValue(string) | let template_value: TemplateValue => template_value end fun box _override(name: String, value: TemplateValue): TemplateValues => let values = Map[String, TemplateValue] values(name) = value TemplateValues._create(this, values) class TemplateContext let functions: Map[String, {(String): String}] box new val create( functions': Map[String, {(String): String}] val = recover Map[String, {(String): String}] end ) => functions = functions' class val Template let _parts: Array[_Part] box new val parse(source: String, ctx: TemplateContext val = TemplateContext())? => _parts = _parse(source, ctx)? new val from_file(path: FilePath, ctx: TemplateContext val = TemplateContext())? => let chunk_size: USize = 1024 * 1024 * 1 match OpenFile(path) | let file: File => var data = ByteArrays() while file.errno() is FileOK do data = data + file.read(chunk_size) end _parts = _parse(data.string(), ctx)? else error end fun tag _parse(source: String, ctx: TemplateContext val): Array[_Part] box? => var parts: Array[_Part] = [] var current_parts = parts var open: Array[((_IfNode | _IfNotEmptyNode | _LoopNode), Array[_Part])] = [] var prev_end: USize = 0 for m in Regex(\"\\\\{\\\\{(.+?)\\\\}\\\\}\")?.matches(source) do if m.start_pos() != prev_end then let literal = source.substring(prev_end.isize(), m.start_pos().isize()) current_parts.push((_Literal, consume literal)) end match _StmtParser.parse(m(1)?)? | _EndNode => current_parts = _parse_end(open, parts)? | let prop: _PropNode => current_parts.push(prop) | let call: _CallNode => current_parts.push(_Call(ctx.functions(call.name)?, call.arg)) | let if': _IfNode => current_parts = Array[_Part] open.push((if', current_parts)) | let ifnotempty: _IfNotEmptyNode => current_parts = Array[_Part] open.push((ifnotempty, current_parts)) | let loop: _LoopNode => current_parts = Array[_Part] open.push((loop, current_parts)) end prev_end = m.end_pos() + 1 end if prev_end < source.size() then parts.push((_Literal, source.substring(prev_end.isize()))) end if open.size() > 0 then error end consume parts fun tag _parse_end( open: Array[((_IfNode | _IfNotEmptyNode | _LoopNode), Array[_Part])], parts: Array[_Part] ): Array[_Part]? => (let stmt, let body) = open.pop()? let next_current = if open.size() == 0 then parts else open(open.size() - 1)?._2 end match stmt | let if': _IfNode => next_current.push(_If(if'.value, body)) | let ifnotempty: _IfNotEmptyNode => next_current.push(_IfNotEmpty(ifnotempty.value, body)) | let loop: _LoopNode => next_current.push(_Loop(loop.target, loop.source, body)) end next_current fun render(values: TemplateValues box): String? => \"\"\" Fills in the given values into template. \"\"\" _render_parts(_parts, values)? fun tag _render_parts(parts: Array[_Part] box, values: TemplateValues box): String? => var result = ByteArrays() for part in parts.values() do match part | (_Literal, let value: String) => result = result + value | let call: _Call box => let arg = values._lookup(call.arg)? result = result + call.f(arg.string()?) | let prop: _PropNode => // XXX make this an error instead let substitution = try values._lookup(prop)?.string()? else \"\" end result = result + substitution | let if': _If box => try values._lookup(if'.value)? result = result + _render_parts(if'.body, values)? end | let ifnotempty: _IfNotEmpty box => if values._lookup(ifnotempty.value)?.values().has_next() then result = result + _render_parts(ifnotempty.body, values)? end | let loop: _Loop box => for value in values._lookup(loop.source)?.values() do let body_values = values._override(loop.target, value) result = result + _render_parts(loop.body, body_values)? end end end result.string()","title":"Template"}]}